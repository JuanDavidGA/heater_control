%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/.../Hunting_coefficients/time_sample_2.txt
%
% To extend the code to different selected data or a different text file, generate a function instead of a script.

% Auto-generated by MATLAB on 2022/04/05 20:25:08

%% Initialize variables.
filename = '/Users/.../Hunting_coefficients/time_sample_2.txt';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%8s%9s%2s%7s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Convert the contents of columns with dates to MATLAB datetimes using the specified date format.
try
    dates{1} = datetime(dataArray{1}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{1} = cellfun(@(x) x(2:end-1), dataArray{1}, 'UniformOutput', false);
        dates{1} = datetime(dataArray{1}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
    catch
        dates{1} = repmat(datetime([NaN NaN NaN]), size(dataArray{1}));
    end
end

dates = dates(:,1);

%% Split data into numeric and string columns.
rawNumericColumns = {};
rawStringColumns = string(raw(:, [2,3,4,5]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,3,4]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
timesample2 = table;
timesample2.TimeAnd = dates{:, 1};
timesample2.DateThe = categorical(rawStringColumns(:, 1));
timesample2.d = categorical(rawStringColumns(:, 2));
timesample2.ataWas = categorical(rawStringColumns(:, 3));
timesample2.taken = categorical(rawStringColumns(:, 4));

% For code requiring serial dates (datenum) instead of datetime, uncomment the following line(s) below to return the imported dates as datenum(s).

% timesample2.TimeAnd=datenum(timesample2.TimeAnd);

%% Clear temporary variables
clearvars filename formatSpec fileID dataArray ans raw col numericData dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawStringColumns R catIdx idx;